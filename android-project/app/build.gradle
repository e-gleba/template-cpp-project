final boolean is_built_as_library = project.hasProperty('BUILD_AS_LIBRARY')
final boolean is_built_as_application = !is_built_as_library

if (is_built_as_application) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdk 35
    ndkVersion '27.0.12077973'
    namespace 'mil.eugene.gamedev'
    buildToolsVersion '36.0.0'

    defaultConfig {
        if (is_built_as_application) {
            applicationId "mil.eugene.gamedev"
        }
        minSdkVersion 24
        targetSdk 35
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-21", "-DANDROID_STL=c++_shared"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    applicationVariants.configureEach { variant ->
        tasks.named("merge${variant.name.capitalize()}Assets") {
            dependsOn("externalNativeBuild${variant.name.capitalize()}")
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                version("4.0.2")
                path '../../CMakeLists.txt'
            }
        }
    }

    if (is_built_as_library) {
        libraryVariants.all { variant ->
            variant.outputs.all { output ->
                if (outputFile.name.endsWith(".aar")) {
                    output.outputFile = new File(outputFile.parent, "org.libsdl.app.aar")
                }
            }
        }
    }

    sourceSets {
        main {
            assets {
                srcDirs = ['../../assets']
            }
        }
    }
    lint {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
