final boolean isLibrary = project.hasProperty('BUILD_AS_LIBRARY')
final boolean excludeNativeLibs = project.hasProperty('EXCLUDE_NATIVE_LIBS')

if (isLibrary) {
    apply plugin: libs.plugins.android.library.get().pluginId
}
else {
    apply plugin: libs.plugins.android.application.get().pluginId
}

android {
    compileSdk = 36
    ndkVersion = "27.3.13750724"
    namespace = "com.egleba.app"
    buildToolsVersion = "36.0.0"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        if (!isLibrary) {
            applicationId = namespace
        }

        minSdk = 24
        targetSdk 36
        versionCode = 1
        versionName = "1.0.0"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-21", "-DANDROID_STL=c++_shared", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        prefab = true
    }

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
        }
        release {
            minifyEnabled = true
            shrinkResources = !isLibrary
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig = signingConfigs.debug

            ndk {
                debugSymbolLevel = 'SYMBOL_TABLE'
            }

            postprocessing {
                removeUnusedCode = true
                removeUnusedResources = true
                obfuscate = false
                optimizeCode = true
            }
        }
    }

    if (!excludeNativeLibs) {
        externalNativeBuild {
            cmake {
                path = file('../../CMakeLists.txt')
                version = "3.31.6"
            }
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['../../assets']
            if (!excludeNativeLibs) {
                jniLibs.srcDirs = ['libs']
            }
        }
    }

    if (isLibrary) {
        libraryVariants.configureEach { variant ->
            variant.outputs.configureEach {
                if (outputFileName.endsWith('.aar')) {
                    outputFileName = "${project.name}-${variant.name}.aar"
                }
            }
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = false
        }
    }

    lint {
        abortOnError = false
        checkReleaseBuilds = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    testImplementation libs.junit
    testImplementation libs.junit.jupiter

    testRuntimeOnly libs.junit.platform.launcher

    androidTestImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.runner
    androidTestImplementation libs.rules
}