final boolean isLibrary = project.hasProperty('BUILD_AS_LIBRARY')
final boolean excludeNativeLibs = project.hasProperty('EXCLUDE_NATIVE_LIBS')

if (isLibrary) {
    apply plugin: 'com.android.library'
}
else {
    apply plugin: 'com.android.application'
}

android {
    compileSdk libs.versions.compile.sdk.get().toInteger()
    ndkVersion libs.versions.ndk.get()
    namespace libs.versions.app.namespace.get()
    buildToolsVersion libs.versions.build.tools.get()

    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.jvm.target.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.jvm.target.get())
    }

    defaultConfig {
        if (!isLibrary) {
            applicationId libs.versions.app.namespace.get()
        }

        minSdk libs.versions.min.sdk.get().toInteger()
        targetSdk libs.versions.target.sdk.get().toInteger()
        versionCode libs.versions.version.code.get().toInteger()
        versionName libs.versions.version.name.get()

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-21", "-DANDROID_STL=c++_shared"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    buildFeatures {
        prefab true      // Modern native dependency management
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true // C++ debugging support
        }
        release {
            minifyEnabled true
            shrinkResources !isLibrary
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.debug

            // Performance-first: aggressive optimization
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE' // Balanced symbols for crashes
            }
        }
    }

    if (!excludeNativeLibs) {
        externalNativeBuild {
            cmake {
                path file('../../CMakeLists.txt')
                version libs.versions.cmake.get()
            }
        }
    }

    // Clean asset management
    sourceSets {
        main {
            assets.srcDirs = ['../../assets']
            if (!excludeNativeLibs) {
                jniLibs.srcDirs = ['libs']
            }
        }
    }

    // Library-specific configuration
    if (isLibrary) {
        libraryVariants.configureEach { variant ->
            variant.outputs.configureEach {
                if (outputFileName.endsWith('.aar')) {
                    outputFileName = "${project.name}-${variant.name}.aar"
                }
            }
        }
    }

    // Modern packaging options
    packagingOptions {
        jniLibs {
            useLegacyPackaging = false // Modern packaging for better performance
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false // Skip lint for native-heavy projects
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
}
